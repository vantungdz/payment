import { BeautifulAlert } from '@/components/BeautifulAlert';
import { useAuth } from '@/contexts/AuthContext';
import { LinearGradient } from 'expo-linear-gradient';
import React, { useState } from 'react';
import {
    Dimensions,
    KeyboardAvoidingView,
    Platform,
    ScrollView,
    StyleSheet,
    Text,
    TextInput,
    TouchableOpacity,
    View
} from 'react-native';

const { width } = Dimensions.get('window');

export default function LoginScreen() {
  const [isLoginMode, setIsLoginMode] = useState(true);
  const [username, setUsername] = useState('');
  const [password, setPassword] = useState('');
  const [email, setEmail] = useState('');
  const [phone, setPhone] = useState('');
  const [fullName, setFullName] = useState('');
  const [role, setRole] = useState<'admin' | 'user'>('user');
  const [isLoading, setIsLoading] = useState(false);
  const { login, register } = useAuth();

  const handleLogin = async () => {
    if (!username || !password) {
      BeautifulAlert.error('L·ªói', 'Vui l√≤ng nh·∫≠p t√†i kho·∫£n v√† m·∫≠t kh·∫©u');
      return;
    }

    setIsLoading(true);
    const success = await login(username, password);
    setIsLoading(false);

    if (!success) {
      BeautifulAlert.error('ƒêƒÉng nh·∫≠p th·∫•t b·∫°i', 'T√†i kho·∫£n ho·∫∑c m·∫≠t kh·∫©u kh√¥ng ƒë√∫ng');
    }
  };

  const handleRegister = async () => {
    if (!username || !password || !email || !phone || !fullName) {
      BeautifulAlert.error('L·ªói', 'Vui l√≤ng ƒëi·ªÅn ƒë·∫ßy ƒë·ªß th√¥ng tin');
      return;
    }

    setIsLoading(true);
    const success = await register({
      username,
      password,
      email,
      phone,
      fullName,
      role,
    });
    setIsLoading(false);

    if (!success) {
      BeautifulAlert.error('ƒêƒÉng k√Ω th·∫•t b·∫°i', 'C√≥ l·ªói x·∫£y ra, vui l√≤ng th·ª≠ l·∫°i');
    }
  };

  const handleSubmit = () => {
    if (isLoginMode) {
      handleLogin();
    } else {
      handleRegister();
    }
  };

  const toggleMode = () => {
    setIsLoginMode(!isLoginMode);
    // Clear form when switching modes
    setUsername('');
    setPassword('');
    setEmail('');
    setPhone('');
    setFullName('');
    setRole('user');
  };

  return (
    <LinearGradient colors={['#667eea', '#764ba2']} style={styles.container}>
      <KeyboardAvoidingView
        behavior={Platform.OS === 'ios' ? 'padding' : 'height'}
        style={styles.keyboardView}
      >
        <ScrollView
          contentContainerStyle={styles.scrollContainer}
          showsVerticalScrollIndicator={false}
        >
          {/* Logo and Title */}
          <View style={styles.header}>
            <View style={styles.logoContainer}>
              <Text style={styles.logoEmoji}>üí∞</Text>
            </View>
            <Text style={styles.title}>PaySplit</Text>
            <Text style={styles.subtitle}>
              {isLoginMode ? 'ƒêƒÉng nh·∫≠p ƒë·ªÉ ti·∫øp t·ª•c' : 'T·∫°o t√†i kho·∫£n m·ªõi'}
            </Text>
          </View>

          {/* Login/Register Form */}
          <View style={styles.form}>
            {!isLoginMode && (
              <View style={styles.inputContainer}>
                <Text style={styles.label}>H·ªç v√† t√™n</Text>
                <TextInput
                  style={styles.input}
                  value={fullName}
                  onChangeText={setFullName}
                  placeholder="Nh·∫≠p h·ªç v√† t√™n"
                  placeholderTextColor="rgba(255,255,255,0.7)"
                  autoCapitalize="words"
                />
              </View>
            )}

            <View style={styles.inputContainer}>
              <Text style={styles.label}>T√†i kho·∫£n</Text>
              <TextInput
                style={styles.input}
                value={username}
                onChangeText={setUsername}
                placeholder="Nh·∫≠p t√†i kho·∫£n"
                placeholderTextColor="rgba(255,255,255,0.7)"
                autoCapitalize="none"
                autoCorrect={false}
              />
            </View>

            {!isLoginMode && (
              <View style={styles.inputContainer}>
                <Text style={styles.label}>Email</Text>
                <TextInput
                  style={styles.input}
                  value={email}
                  onChangeText={setEmail}
                  placeholder="Nh·∫≠p email"
                  placeholderTextColor="rgba(255,255,255,0.7)"
                  autoCapitalize="none"
                  keyboardType="email-address"
                  autoCorrect={false}
                />
              </View>
            )}

            {!isLoginMode && (
              <View style={styles.inputContainer}>
                <Text style={styles.label}>S·ªë ƒëi·ªán tho·∫°i</Text>
                <TextInput
                  style={styles.input}
                  value={phone}
                  onChangeText={setPhone}
                  placeholder="Nh·∫≠p s·ªë ƒëi·ªán tho·∫°i"
                  placeholderTextColor="rgba(255,255,255,0.7)"
                  keyboardType="phone-pad"
                />
              </View>
            )}

            <View style={styles.inputContainer}>
              <Text style={styles.label}>M·∫≠t kh·∫©u</Text>
              <TextInput
                style={styles.input}
                value={password}
                onChangeText={setPassword}
                placeholder="Nh·∫≠p m·∫≠t kh·∫©u"
                placeholderTextColor="rgba(255,255,255,0.7)"
                secureTextEntry
                autoCapitalize="none"
                autoCorrect={false}
              />
            </View>

            {!isLoginMode && (
              <View style={styles.inputContainer}>
                <Text style={styles.label}>Vai tr√≤</Text>
                <View style={styles.roleContainer}>
                  <TouchableOpacity
                    style={[
                      styles.roleButton,
                      role === 'user' && styles.roleButtonActive,
                    ]}
                    onPress={() => setRole('user')}
                  >
                    <Text
                      style={[
                        styles.roleButtonText,
                        role === 'user' && styles.roleButtonTextActive,
                      ]}
                    >
                      Ng∆∞·ªùi d√πng
                    </Text>
                  </TouchableOpacity>
                  <TouchableOpacity
                    style={[
                      styles.roleButton,
                      role === 'admin' && styles.roleButtonActive,
                    ]}
                    onPress={() => setRole('admin')}
                  >
                    <Text
                      style={[
                        styles.roleButtonText,
                        role === 'admin' && styles.roleButtonTextActive,
                      ]}
                    >
                      Qu·∫£n tr·ªã vi√™n
                    </Text>
                  </TouchableOpacity>
                </View>
              </View>
            )}

            <TouchableOpacity
              style={[styles.loginButton, isLoading && styles.loginButtonDisabled]}
              onPress={handleSubmit}
              disabled={isLoading}
            >
              <Text style={styles.loginButtonText}>
                {isLoading 
                  ? (isLoginMode ? 'ƒêang ƒëƒÉng nh·∫≠p...' : 'ƒêang ƒëƒÉng k√Ω...') 
                  : (isLoginMode ? 'ƒêƒÉng nh·∫≠p' : 'ƒêƒÉng k√Ω')
                }
              </Text>
            </TouchableOpacity>

            <TouchableOpacity style={styles.switchModeButton} onPress={toggleMode}>
              <Text style={styles.switchModeText}>
                {isLoginMode 
                  ? 'Ch∆∞a c√≥ t√†i kho·∫£n? ƒêƒÉng k√Ω ngay' 
                  : 'ƒê√£ c√≥ t√†i kho·∫£n? ƒêƒÉng nh·∫≠p ngay'
                }
              </Text>
            </TouchableOpacity>
          </View>

          {/* Features */}
          <View style={styles.features}>
            <View style={styles.feature}>
              <Text style={styles.featureIcon}>üë•</Text>
              <Text style={styles.featureText}>Chia ti·ªÅn nh√≥m</Text>
            </View>
            <View style={styles.feature}>
              <Text style={styles.featureIcon}>üí≥</Text>
              <Text style={styles.featureText}>Thanh to√°n MoMo</Text>
            </View>
            <View style={styles.feature}>
              <Text style={styles.featureIcon}>üì±</Text>
              <Text style={styles.featureText}>D·ªÖ s·ª≠ d·ª•ng</Text>
            </View>
          </View>
        </ScrollView>
      </KeyboardAvoidingView>
    </LinearGradient>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
  },
  keyboardView: {
    flex: 1,
  },
  scrollContainer: {
    flexGrow: 1,
    justifyContent: 'center',
    padding: 20,
  },
  header: {
    alignItems: 'center',
    marginBottom: 40,
  },
  logoContainer: {
    width: 100,
    height: 100,
    borderRadius: 50,
    backgroundColor: 'rgba(255,255,255,0.2)',
    justifyContent: 'center',
    alignItems: 'center',
    marginBottom: 20,
    borderWidth: 2,
    borderColor: 'rgba(255,255,255,0.3)',
  },
  logoEmoji: {
    fontSize: 40,
  },
  title: {
    fontSize: 32,
    fontWeight: 'bold',
    color: 'white',
    marginBottom: 8,
    textShadowColor: 'rgba(0,0,0,0.3)',
    textShadowOffset: { width: 0, height: 2 },
    textShadowRadius: 4,
  },
  subtitle: {
    fontSize: 16,
    color: 'rgba(255,255,255,0.8)',
    textAlign: 'center',
  },
  form: {
    width: '100%',
    maxWidth: 400,
    alignSelf: 'center',
  },
  inputContainer: {
    marginBottom: 20,
  },
  label: {
    fontSize: 16,
    fontWeight: '600',
    color: 'white',
    marginBottom: 8,
  },
  input: {
    backgroundColor: 'rgba(255,255,255,0.15)',
    borderRadius: 12,
    padding: 16,
    fontSize: 16,
    color: 'white',
    borderWidth: 1,
    borderColor: 'rgba(255,255,255,0.3)',
  },
  loginButton: {
    backgroundColor: 'white',
    borderRadius: 12,
    padding: 16,
    alignItems: 'center',
    marginTop: 10,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 4 },
    shadowOpacity: 0.3,
    shadowRadius: 8,
    elevation: 8,
  },
  loginButtonDisabled: {
    opacity: 0.7,
  },
  loginButtonText: {
    fontSize: 18,
    fontWeight: 'bold',
    color: '#667eea',
  },
  roleContainer: {
    flexDirection: 'row',
    gap: 10,
    marginTop: 8,
  },
  roleButton: {
    flex: 1,
    padding: 12,
    borderRadius: 8,
    borderWidth: 1,
    borderColor: 'rgba(255,255,255,0.3)',
    backgroundColor: 'rgba(255,255,255,0.1)',
    alignItems: 'center',
  },
  roleButtonActive: {
    backgroundColor: 'rgba(255,255,255,0.3)',
    borderColor: 'rgba(255,255,255,0.6)',
  },
  roleButtonText: {
    color: 'rgba(255,255,255,0.8)',
    fontSize: 14,
    fontWeight: '500',
  },
  roleButtonTextActive: {
    color: 'white',
    fontWeight: 'bold',
  },
  switchModeButton: {
    marginTop: 20,
    alignItems: 'center',
    padding: 10,
  },
  switchModeText: {
    fontSize: 14,
    color: 'rgba(255,255,255,0.8)',
    textDecorationLine: 'underline',
  },
  demoButton: {
    marginTop: 20,
    alignItems: 'center',
  },
  demoButtonText: {
    fontSize: 14,
    color: 'rgba(255,255,255,0.8)',
    textDecorationLine: 'underline',
  },
  features: {
    flexDirection: 'row',
    justifyContent: 'space-around',
    marginTop: 40,
    paddingTop: 30,
    borderTopWidth: 1,
    borderTopColor: 'rgba(255,255,255,0.2)',
  },
  feature: {
    alignItems: 'center',
    flex: 1,
  },
  featureIcon: {
    fontSize: 24,
    marginBottom: 8,
  },
  featureText: {
    fontSize: 12,
    color: 'rgba(255,255,255,0.8)',
    textAlign: 'center',
  },
});
